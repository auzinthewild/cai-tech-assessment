import{ai as _,y as C,aj as B,ak as tt,al as R,am as et,an as D,ao as nt,ap as at,aq as st,ar as it}from"./index-DGqPt3Sh.js";function H(t){if(!t)return null;const n=t.wkid;if(n)return tt[n];const e=t.wkt2??t.wkt;return e?ot(e):null}function ot(t){const n=et.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const c=parseFloat(e[1]),a=parseFloat(e[2]);return isNaN(c)||isNaN(a)?null:{a:c,f:a===0?0:1/a}}function G(t){const n=H(t);if(rt(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function rt(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function E(t,n,e){const{a:c,eSq:a}=G(e),s=Math.sqrt(a),i=Math.sin(n[1]*R),l=c*n[0]*R;let r;return a>0?r=c*((1-a)*(i/(1-a*(i*i))-1/(2*s)*Math.log((1-s*i)/(1+s*i))))*.5:r=c*i,t[0]=l,t[1]=r,t}function I(t){return _(t)&&!!H(t)}function lt(t,n="square-meters"){if(t.some(i=>!I(i.spatialReference)))throw new C("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let i=0;i<t.length;i++){const l=t[i],r=l.spatialReference,{radius:h,densificationRatio:u}=G(r),o=h*u;e.push(ht(l,o))}const c=[],a=[0,0],s=[0,0];for(let i=0;i<e.length;i++){const{rings:l,spatialReference:r}=e[i];let h=0;for(let u=0;u<l.length;u++){const o=l[u];E(a,o[0],r),E(s,o[o.length-1],r);let M=s[0]*a[1]-a[0]*s[1];for(let d=0;d<o.length-1;d++)E(a,o[d+1],r),E(s,o[d],r),M+=s[0]*a[1]-a[0]*s[1];h+=M}h=B(h,"square-meters",n),c.push(h/-2)}return c}function ut(t,n="meters"){if(!t)throw new C("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(c=>!I(c.spatialReference)))throw new C("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let c=0;c<t.length;c++){const a=t[c],{spatialReference:s}=a,i=a.type==="polyline"?a.paths:a.rings;let l=0;for(let r=0;r<i.length;r++){const h=i[r];let u=0;for(let o=1;o<h.length;o++){const M=h[o-1][0],d=h[o][0],m=h[o-1][1],g=h[o][1];if(m!==g||M!==d){const p=new J;K(p,[M,m],[d,g],s),u+=p.distance}}l+=u}l=B(l,"meters",n),e.push(l)}return e}function ht(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new C("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!I(e))throw new C("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const c=t.type==="polyline"?t.paths:t.rings,a=[],s=[0,0],i=new J;for(const r of c){const h=[];a.push(h),h.push([r[0][0],r[0][1]]);let u,o,M=r[0][0],d=r[0][1];for(let m=0;m<r.length-1;m++){if(u=r[m+1][0],o=r[m+1][1],M===u&&d===o)continue;const g=[M,d];K(i,[M,d],[u,o],e);const{azimuth:p,distance:v}=i,y=v/n;if(y>1){for(let k=1;k<=y-1;k++)U(s,g,p,k*n,e),h.push(s.slice());U(s,g,p,(v+Math.floor(y-1)*n)/2,e),h.push(s.slice())}U(s,g,p,v,e),h.push(s.slice()),M=s[0],d=s[1]}}const l=at(D,e);return t.type==="polyline"?new st({paths:a,spatialReference:l}):new it({rings:a,spatialReference:l})}class J{constructor(n=0,e=void 0,c=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=c}}function U(t,n,e,c,a){const s=n[0],i=n[1],l=s*R,r=i*R,h=(e??0)*R,{a:u,b:o,f:M}=G(a),d=Math.sin(h),m=Math.cos(h),g=(1-M)*Math.tan(r),p=1/Math.sqrt(1+g*g),v=g*p,y=Math.atan2(g,m),k=p*d,S=k*k,z=1-S,f=z*(u*u-o*o)/(o*o),$=1+f/16384*(4096+f*(f*(320-175*f)-768)),x=f/1024*(256+f*(f*(74-47*f)-128));let q,j,w,b=c/(o*$),F=2*Math.PI;for(;Math.abs(b-F)>1e-12;)w=Math.cos(2*y+b),q=Math.sin(b),j=Math.cos(b),F=b,b=c/(o*$)+x*q*(w+x/4*(j*(2*w*w-1)-x/6*w*(4*q*q-3)*(4*w*w-3)));const N=v*q-p*j*m,A=Math.atan2(v*j+p*q*m,(1-M)*Math.sqrt(S+N*N)),P=M/16*z*(4+M*(4-3*z)),O=Math.atan2(q*d,p*j-v*q*m)-(1-P)*M*k*(b+P*q*(w+P*j*(2*w*w-1)));return t[0]=(l+O)/R,t[1]=A/R,t}function K(t,n,e,c){const a=n[0]*R,s=n[1]*R,i=e[0]*R,l=e[1]*R,{a:r,b:h,f:u,radius:o}=G(c),M=i-a,d=Math.atan((1-u)*Math.tan(s)),m=Math.atan((1-u)*Math.tan(l)),g=Math.sin(d),p=Math.cos(d),v=Math.sin(m),y=Math.cos(m);let k,S,z,f,$,x,q,j,w,b,F=1e3,N=M;do{if(q=Math.sin(N),j=Math.cos(N),z=Math.sqrt(y*q*(y*q)+(p*v-g*y*j)*(p*v-g*y*j)),z===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;$=g*v+p*y*j,x=Math.atan2(z,$),w=p*y*q/z,S=1-w*w,f=$-2*g*v/S,isNaN(f)&&(f=0),b=u/16*S*(4+u*(4-3*S)),k=N,N=M+(1-b)*u*w*(x+b*z*(f+b*$*(2*f*f-1)))}while(Math.abs(N-k)>1e-12&&--F>0);if(F===0){const T=o,V=Math.acos(Math.sin(s)*Math.sin(l)+Math.cos(s)*Math.cos(l)*Math.cos(i-a))*T,W=i-a,X=Math.sin(W)*Math.cos(l),Y=Math.cos(s)*Math.sin(l)-Math.sin(s)*Math.cos(l)*Math.cos(W),Z=Math.atan2(X,Y);return t.azimuth=Z/R,t.distance=V,t.reverseAzimuth=void 0,t}const A=S*(r*r-h*h)/(h*h),P=A/1024*(256+A*(A*(74-47*A)-128)),O=h*(1+A/16384*(4096+A*(A*(320-175*A)-768)))*(x-P*z*(f+P/4*($*(2*f*f-1)-P/6*f*(4*z*z-3)*(4*f*f-3)))),L=Math.atan2(y*Math.sin(N),p*v-g*y*Math.cos(N)),Q=Math.atan2(p*Math.sin(N),p*v*Math.cos(N)-g*y);return t.azimuth=L/R,t.distance=O,t.reverseAzimuth=Q/R,t}function ft(t){return I(t)?t:nt(t)?D.WGS84:null}export{ft as N,ut as R,J as b,U as j,K as q,lt as v,I as y};
